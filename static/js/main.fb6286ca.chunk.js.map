{"version":3,"sources":["components/JokesListItem/index.tsx","config.ts","services/JokesService.ts","hooks/useMultipleFetch.ts","components/JokesList/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["JokesListItem","joke","rest","className","memo","GET_RANDOM_JOKE_FETCH_CONFIG","method","headers","Accept","getRandomJoke","fetch","then","response","json","useMultipleFetch","fetchFunc","numberOfData","initialDataState","useState","result","isLoading","state","setState","fetchData","useCallback","a","promises","i","push","Promise","allSettled","filter","status","map","value","useEffect","JokesList","jokesData","jokeObject","key","hidden","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAIMA,EAAgB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAASC,EAA+B,wBAC/D,OAAO,4CAAIC,UAAW,aAAiBD,GAAhC,aAAuCD,MAGjCG,iBAAKJ,GCNPK,EAA4C,CACvDC,OAAQ,MACRC,QAAS,CACPC,OAAQ,qBCHCC,EAAgB,WAC3B,OAAOC,MDHc,8BCGCL,GAA8BM,MAAK,SAACC,GAAD,OACvDA,EAASC,W,+BCmCEC,MArCf,SACEC,GAGiB,IAFjBC,EAEgB,uDAFO,GACvBC,EACgB,uDADQ,GACR,EAMUC,mBAAgB,CACxCC,OAAQF,EACRG,WAAW,IARG,mBAMTC,EANS,KAMFC,EANE,KAWVC,EAAYC,sBAAW,sBAAC,gCAAAC,EAAA,sDAE5B,IADMC,EAAyB,GACtBC,EAAI,EAAGA,EAAIX,EAAcW,IAChCD,EAASE,KAAKb,KAHY,gBAKNc,QAAQC,WAAWJ,GALb,OAKtBP,EALsB,OAKwBY,QAClD,kBAA2B,cAA3B,EAAGC,UAGLV,EAAS,CACPH,OAAQA,EAAOc,KAAI,qBAAGC,SACtBd,WAAW,IAXe,2CAa3B,CAACL,EAAWC,IAMf,OAJAmB,qBAAU,WACRZ,MACC,CAACA,IAEG,CAACF,EAAMF,OAAQE,EAAMD,YC5BxBgB,EAAY,WAAO,IAAD,EACStB,EAC7BL,EHTqB,IGOD,mBACf4B,EADe,KACJjB,EADI,KAMtB,OACE,qCACE,oBAAIjB,UAAW,aAAf,SACGkC,EAAUJ,KAAI,SAACK,EAAYC,GAAb,OACb,cAAC,EAAD,CAAetC,KAAMqC,EAAWrC,MAAWsC,QAG/C,qBAAKC,QAASpB,EAAd,4BAKShB,iBAAKgC,GCbLK,MATf,WACE,OACE,sBAAKtC,UAAU,MAAf,UACE,uCACA,cAAC,EAAD,QCMSuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fb6286ca.chunk.js","sourcesContent":["import { memo } from 'react';\nimport { JokesListItemProps } from '../../types';\nimport './styles.scss';\n\nconst JokesListItem = ({ joke, ...rest }: JokesListItemProps) => {\n  return <li className={'list-item'} {...rest}>{joke}</li>;\n};\n\nexport default memo(JokesListItem);\n","export const API_URL = 'https://icanhazdadjoke.com/';\nexport const MAX_JOKES = 20;\nexport const GET_RANDOM_JOKE_FETCH_CONFIG: RequestInit = {\n  method: 'GET',\n  headers: {\n    Accept: 'application/json'\n  }\n};\n","import { API_URL, GET_RANDOM_JOKE_FETCH_CONFIG } from '../config';\n\nexport const getRandomJoke = () => {\n  return fetch(API_URL, GET_RANDOM_JOKE_FETCH_CONFIG).then((response) =>\n    response.json()\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nfunction useMultipleFetch<T>(\n  fetchFunc: Function,\n  numberOfData: number = 20,\n  initialDataState: T[] = []\n): [T[], boolean] {\n  type State = {\n    isLoading: boolean;\n    result: T[];\n  };\n\n  const [state, setState] = useState<State>({\n    result: initialDataState,\n    isLoading: true\n  });\n\n  const fetchData = useCallback(async () => {\n    const promises: Promise<T>[] = [];\n    for (let i = 0; i < numberOfData; i++) {\n      promises.push(fetchFunc());\n    }\n    const result = (await Promise.allSettled(promises)).filter(\n      ({ status }) => status === 'fulfilled'\n    ) as PromiseFulfilledResult<T>[];\n\n    setState({\n      result: result.map(({ value }) => value),\n      isLoading: false\n    });\n  }, [fetchFunc, numberOfData]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return [state.result, state.isLoading];\n}\n\nexport default useMultipleFetch;\n","import { memo } from 'react';\nimport JokesListItem from '../JokesListItem';\nimport { MAX_JOKES } from '../../config';\nimport { getRandomJoke } from '../../services/JokesService';\nimport { JokeObject } from '../../types';\nimport './styles.scss';\nimport useMultipleFetch from '../../hooks/useMultipleFetch';\n\nconst JokesList = () => {\n  const [jokesData, isLoading] = useMultipleFetch<JokeObject>(\n    getRandomJoke,\n    MAX_JOKES\n  );\n\n  return (\n    <>\n      <ul className={'jokes-list'}>\n        {jokesData.map((jokeObject, key) => (\n          <JokesListItem joke={jokeObject.joke} key={key} />\n        ))}\n      </ul>\n      <div hidden={!isLoading}>Loading...</div>\n    </>\n  );\n};\n\nexport default memo(JokesList);\n","import React from 'react';\nimport './App.scss';\nimport JokesList from './components/JokesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Jokes</h1>\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}